{"/example/folder/":{"data":{"":"folder _index.md"},"title":"example/folder/_index.md"},"/example/folder/example-page/":{"data":{"":"example/folder/example-page.md"},"title":"example-page"},"/first-page/":{"data":{"":"","artbox-on-a-gitlab-repository-map#Artbox on a GitLab Repository Map":"Artbox is a digital painting and illustration application for Linux, specifically designed to cater to the needs of artists. It is an open-sourced, artist-adjusted version of GIMP, which allows for more flexibility and customization. The intention behind Artbox is to add new features and modify GUI interactions to make the application more fun and productive for artists. While GIMP is a powerful and versatile tool, its broad user base and design requirements can make it difficult to introduce significant changes. Artbox addresses this limitation by building on top of the GIMP codebase, adding new features that can do more than traditional plug-ins. However, managing these changes carefully is crucial to ensure that Artbox remains stable and compatible with the underlying GIMP codebase.\nArtbox is powered by the GNU Image Manipulation Program open source project.\nArtbox on a GitLab Repository Map graph LR;\r%% GIMP Repo\rGIMP_repo(\"GIMP\rFeature Requests\rIssues\")\r%% end\r%% Digital Painting Repo\rpainting_repo(\"Digital Painting\rGallery\rTechnique\rDiscussion\rTools\rWiki\rDesign Investigations\rResource Downloads\r\")\r%% end\r%% Artbox Repo\rartbox_repo(\"Artbox\rPainters App\rCode Tests\rWiki\rDesign Testing\")\r%% end\r%% Design Proposals for Digital Art Repo\rproposal_repo(\"Design Proposals for Digital Art\rDesign Discussion\rTerminology Discussion\rWiki\rDesign Revision\rTerminology Revision\rDesign Proposal\rTerminology Proposal\")\r%% end\rpainting_repo \u003c--\u003e proposal_repo\rartbox_repo \u003c--\u003e proposal_repo\rproposal_repo -.- GIMP_repo The diagram illustrates the links between the Digital Painting, Artbox, and Design Proposals for Digital Art repositories, which are working on enhancing digital art tools and techniques. The Design Proposals for Digital Art repository plays a central role in this network, aiming to provide high-quality feature proposals to the GIMP team, through in-depth discussions and revisions. While Digital Painting focuses on community discussions, techniques, and resources, Artbox is dedicated to app development and practical testing.\nDigital Painting Design Proposals for Digital Art "},"title":"Artbox"},"/guides/":{"data":{"":"text about the guides"},"title":"Guides"},"/guides/folder/":{"data":{"":"folder _index.md"},"title":"Guides"},"/guides/folder/a-linux-system-overview/":{"data":{"":"","examples-of-linux-distribution-configurations#Examples of Linux Distribution Configurations":"","explanation#Explanation":"Linux is a powerful and versatile operating system with a vast community of developers. At its core, a Linux system consists of several key components that work together to provide a seamless user experience. This overview will outline the essential parts of a Linux system, including the kernel, distribution, package manager, display manager, desktop environment, and display server (X11 or Wayland).\nExamples of Linux Distribution Configurations Distribution Package Manager Display Manager Desktop Environment Display Server Debian APT GDM GNOME X11 Debian APT LightDM Cinnamon X11 Debian Testing APT GDM GNOME Wayland Fedora DNF GDM GNOME Wayland Arch Linux Pacman SDDM KDE Plasma X11 Explanation Kernel The core of the operating system that interfaces directly with the hardware, usually Linux.\nDistribution The Linux distribution, which packages the kernel along with user space tools, libraries, and software. Examples include Debian, Arch Linux, and Fedora.\nPackage Manager A tool used to install, update, and remove software applications from repositories. Examples include APT for Debian-based distributions, DNF for Fedora, and Pacman for Arch Linux.\nDisplay Manager Manages the graphical login screen and session initiation. Examples include GDM (GNOME Display Manager), LightDM, and SDDM (Simple Desktop Display Manager).\nDesktop Environment Provides the graphical user interface (GUI) and manages the overall appearance and user experience. Examples include GNOME, Cinnamon, and KDE Plasma.\nDisplay Server Manages the display output and input events. Examples include X11 (X Window System) and Wayland. X11 is a traditional display server, while Wayland is a newer, more secure alternative."},"title":"A-Linux-System-Overview"},"/guides/folder/installing-debian/":{"data":{"backup-your-data#Backup Your Data":"","create-a-partition#Create a Partition":"","create-a-usb-to-install-debian-stable#Create a USB to Install Debian Stable":"","git#Git":"IntroductionThis document outlines the steps I took to install Debian Stable as the Artbox OS. It may be useful for others attempting a similar installation. Debian Stable was chosen as the Linux platform because GIMP Dev is built on Debian Testing and aims to support building GIMP on Debian Stable.\nBackup Your Data Before installing Debian, make a complete backup of your Home directory on an external drive. Include any other data folders and files you want to keep. If you have Git repositories, push any wanted changes to the origins to easily restore them after the install. Any unsaved data will be lost.\nCreate a Partition Create a disk partition on your primary hard drive to install Debian onto. This process has many online guides and various tools, such as GParted. You may need to create a partition from Windows to create a dual-boot machine or reuse an existing partition for Linux. Understand the process specific to your system and needs before proceeding.\nCreate a USB to Install Debian Stable Assuming you have created a partition on your primary hard drive for Debian and an appropriate-sized swap partition:\nDownload the Debian ISO from the official website. On Windows, we can use BalenaEtcher to put the ISO on a USB drive. On Linux, we can use a command-line tool to create a bootable USB from the ISO. Install Insert the USB drive into a main USB port. Restart and press F2 on the initial screen to access the boot options. Select the USB drive to boot from. Choose a non-graphical install. Skip the root password when asked, leaving it blank, and set a user password on the next section. Partition manually: Set your spare partition as ext4 journaling. Set your swap partition. Mount point: / Label: linux Hostname: name (appears to the right of your terminal prompt user@hostname) User account: Your Full Name User: name (appears to the left of your terminal prompt) Add Cinnamon to the install section for a traditional desktop interface. The installation will proceed, and you should have a new Debian Stable OS to set up. Setup the System Display Scaling You may have purchased a 4K monitor to use 4K worth of display, at the moment, Debian Stable does not do fractional scaling in a way that allows this.\nAn ideal approach to display scaling would be, where the display resolution is retained, and only the GUI elements are scaled up or down to match the desired size. This is often referred to as “resolution-independent” or “high-DPI” scaling.\nIn this approach, the display resolution remains the same (e.g., 4K), and the GUI elements, such as text, icons, and graphics, are scaled up or down to match the desired size. This way, the display resolution is not compromised, and the GUI elements are rendered at a size that’s comfortable for the user.\nUnfortunately, Linux desktop environments have been slower to adopt this approach, and many still use the older method of scaling the display resolution itself, which can lead to the blurriness.\nAvoid fractional display scaling, as Debian Stable does not support it well. Instead, use the following workaround: Menu -\u003e Search -\u003e Font Selection -\u003e Font Settings -\u003e Text Scaling Factor -\u003e 2.5 Menu -\u003e Search -\u003e Font Selection -\u003e Desktop Font 14: affects both monitors Menu -\u003e Search -\u003e Panel -\u003e Customize -\u003e Panel Height 60 Menu -\u003e Search -\u003e Panel -\u003e Panel appearance -\u003e Right Zone: Symbolic Icon Size 48px Menu -\u003e Search -\u003e Mouse and Touchpad -\u003e Pointer Size and Speed: affects both monitors Right-click the 4K monitor Desktop -\u003e Customize: Icon Size Larger Firefox: in the address bar -\u003e about:config -\u003e search: layout.css.devPixelsPerPx -\u003e set the value to 1 Terminal Configure your terminal to your liking:\nMenu -\u003e Search -\u003e Terminal -\u003e Edit -\u003e Preferences Text -\u003e Initial Size 140: columns 40 rows Text -\u003e Custom font: 140: Monospace 10 Colours -\u003e Built-in-schemes -\u003e Solarized Dark Restore Data - User Specific Restore your backed-up data to the Home directory. For example:\nBackup/Home/Artwork -\u003e Home/Artwork Backup/Home/code -\u003e Home/code Backup/Home/Desktop -\u003e Home/Desktop Backup/Home/.ssh (GitLab keys) -\u003e Home/.ssh (GitLab keys) Backup/Home/.config/GIMP -\u003e Home/.config/GIMP Git Install Git using the terminal command: sudo apt install git Configure your Git email: git config --global --edit\nGitLab Access Restore repository access to GitLab or GitHub:\nChange the permissions on the SSH key file: chmod 600 ~/.ssh/id_rsa Add the user to the new Git install: ssh-add ~/.ssh/id_rsa Test the connection: ssh -T git@ssh.gitlab.gnome.org or ssh -T git@github.com For each repository, fetch the origins and reset the local branch to match:\ngit reset --hard remote-name/branch-name git clean -df A git status report on the updated repo should now look normal. This may also need to be done on any submodules.\nWe now have a new OS with any data and repositories restored. This process is fairly specific to my usage and knowledge of Linux, feel free to offer any suggestions for improving it as a guide.","install#Install":"","introduction#Introduction":"","restore-data---user-specific#Restore Data - User Specific":"","setup-the-system#Setup the System":"","terminal#Terminal":""},"title":"Installing-Debian"},"/guides/folder/system-backup-clonezilla/":{"data":{"introduction#Introduction":"","key-features-of-clonezilla#Key Features of Clonezilla":"","using-clonezilla-to-backup-and-restore-a-debian-partition#Using Clonezilla to Backup and Restore a Debian Partition":"IntroductionIt’s common to back up your important files to return to earlier versions or replace corrupted data. However, another essential type of backup is a disk clone, a complete backup of your system’s state.\nOnce you have your system set up and working well, creating a full backup is crucial for restoring your environment in case disaster strikes. This backup complements regularly saving your working data.\nClonezilla is a free and open-source disk imaging and cloning software. It allows users to create and restore full backups of their computer’s hard drive, making it a popular tool for IT professionals and home users alike.\nIt’s always better to have a backup and not need it than to need a backup and not have it.\nKey Features of Clonezilla Disk Imaging: Clonezilla creates an exact copy of a hard drive, including the operating system, applications, and data. Backup and Restore: It enables you to create a backup image of a hard drive and restore it in case of failure or migration to a new drive. Free and Open Source: Clonezilla is completely free to use, and the source code is available for modification and customization. Using Clonezilla to Backup and Restore a Debian Partition Preparation Steps You will need a USB drive for Clonezilla and an external hard drive that is larger than the internal drive you intend to clone.\nThese steps simplify the process based on the official guide. It’s a good idea to review the full guide, which includes screenshots for added clarity.\nCreate a Clonezilla Live USB or CD/DVD: Follow the detailed instructions on the Clonezilla website to create a bootable USB or CD/DVD.\nConnect Your External Backup Drive: Plug in your external drive and ensure it is recognized by your system. This will be the destination for your backup.\nVerify Your Partition Layout: Use the lsblk command in a terminal to verify the partition layout of your primary hard drive. Note the primary device name.\nBoot from Clonezilla Live USB Drive: Restart your computer and boot from the Clonezilla media you created. You may need to access your BIOS/UEFI settings (usually by pressing F2, F12, ESC, or DEL during boot) and adjust the boot order to prioritize the USB drive.\nBackup with Clonezilla Select Backup Mode: Once Clonezilla boots up, choose “device-device” mode. This mode allows you to directly clone your internal drive to an external device.\nSelect the Source Device: Choose the primary internal drive.\nSelect the Target Device: Choose your external backup drive as the target device. Be careful when selecting the device to avoid overwriting important data. Ensure that the target drive is equal to or larger in size than the source drive.\nStart the Backup Process: Clonezilla will start the backup process. Depending on the size of your partition and the speed of your drives, this could take anywhere from several minutes to a few hours.\nLabel Your Backup: After the backup is complete, label the USB drive and the external hard drive with the date, and the system you backed up. Store them in a safe place.\nRestoring from Backup If you need to restore your Debian system from the backup, follow these steps:\nBoot from Clonezilla Media: Insert the Clonezilla USB and boot from it, following the same steps as during the backup process.\nSelect Restore Mode: Choose the “device-device” mode again, but this time, you will restore from the backup image. This will copy all the data from your external drive back to your internal drive.\nSelect the Source Device: Choose your external drive where the backup is stored.\nSelect the Target Device: Select the internal drive where you want to restore the backup.\nStart the Restore Process: Clonezilla will begin the restore process. As with the backup, the time required will depend on the size of the drive and the speed of your hardware.\nFinal Notes Disk backups with Clonezilla ensure that your entire system—operating system, settings, and applications—is preserved. With minimal effort, you can safeguard your system from catastrophic failure and minimize downtime in the event of a crash.\nRemember, backups are essential. Regularly update your backups and periodically test them to ensure you can restore your system when needed.\nAfter booting, you can plug in your external backup drive and inspect its partition structure using the Disks utility in Linux. The backup drive should mirror the internal drive’s structure, with the same partitions and some unused space if the external drive is larger."},"title":"System-Backup-Clonezilla"},"/guides/folder/using-git-on-linux/":{"data":{"access-gitlab#Access GitLab":"IntroductionWelcome to this beginner’s guide to using Git on Linux! This guide is designed to help you get started with Git and GitLab, and to provide a basic understanding of how to use these tools.\nGit Overview The code used for making applications is kept in a collection of folders and files on your system. Git is an application that allows us to backup, share, and copy that collection. Git is known as a version control system that allows you to track changes to your code and collaborate with others. It’s a powerful tool that’s widely used in the open-source community. GitLab is a web-based platform that allows you to host and manage your Git repositories online, making it easy to collaborate with others and track changes to your code.\nWhat is a Repository? A repo, short for repository, is a Git-managed local folder with an online copy. A Git Lab repo is a collection of files and folders that make up a project. It can have branches that are independent copies of the same project. A branch is a separate version of your project that allows you to make changes without affecting the main version. This is useful for testing new features or fixing bugs without disrupting the main project. There is your local repo, stored on your hard drive, and the remote repo, stored online using Git and GitLab.\nUsing Git You’ll need to install Git on your system. On Debian-based systems, you can use the apt command to install software packages. In this case, we’re using it to install Git, which is a package that provides the Git version control system. The sudo command gives the installer permission to install on your system.\nsudo apt install git Access GitLab Before you can use GitLab, you’ll need to create an account by visiting the GitLab website and completing the registration process.\nGitLab requires SSH for secure and authenticated communication between a client (you, for instance) and the GitLab server when performing Git operations like cloning, pushing, and fetching repositories. Cloning is making a local copy of the repo, fetching is bringing any changes made in the repo to your local copy, and pushing is sending changes and content to the server repository. SSH (Secure Shell) is a network protocol that allows secure remote access and uses key pairs to authenticate and establish secure connections. To generate an SSH key pair, you can use the ssh-keygen command in your terminal.\nssh-keygen Specify a filename, or use the default by pressing Enter, and optionally a password. In your home directory, in a hidden folder called .ssh, there are now two id_rsa files, if you went with default names. The .pub file is the public key and you can see its contents with a text editor.\nLog in to your GitLab account and navigate to your user settings. Click on ‘SSH Keys’ in the left-hand navigation menu. Copy and paste your public key into the Key field and give the key a relevant title, like PC@Home. Click the ‘Add Key’ button to save the key. Your SSH public key is now added to your GitLab account and you can use it to authenticate with GitLab repositories. Test if your keys and connection are working with the ssh -T command to see a welcome message from GitLab.\n$ ssh -T git@ssh.gitlab.gnome.org Welcome to GitLab, @username! ","git-overview#Git Overview":"","introduction#Introduction":"","using-git#Using Git":"","what-is-a-repository#What is a Repository?":""},"title":"Using-Git-on-Linux"},"/themes/":{"data":{"":"Inside the default theme folder are CSS files and assets. Color definitions for the theme are in ‘color-definitions.css’. Assets for a theme are in the assets folder, they are assigned by the CSS file ‘color.css’ in the’stylesheets’ folder. The stylesheets folder contains:\nColor, assignments for color, borders and opacity. Layout, assignments for margins, padding and sizing. Font, assignments for size, style and weight. Round, assignments for rounded corners. ‘Download Zip’. Once downloaded, extract the themes directory someplace. Point Artbox at the folder by adding it here: Edit-\u003ePreferences-\u003eFolders-\u003eThemes Restart Artbox and find the new themes in Edit-\u003ePreferences-\u003eInterface-\u003eTheme "},"title":"Themes"},"/themes/folder/":{"data":{"":"Tested in"},"title":"Themes"},"/themes/folder/dark/":{"data":{"":" "},"title":"Dark"},"/themes/folder/default/":{"data":{"":" "},"title":"Default"},"/themes/folder/example-page/":{"data":{"":"example/folder/example-page.md"},"title":"example-page"},"/themes/folder/high-contrast/":{"data":{"":""},"title":"High Contrast"},"/themes/folder/system/":{"data":{"":""},"title":"System"},"/themes/folder/warm/":{"data":{"":""},"title":"Warm"}}